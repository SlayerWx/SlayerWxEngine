#version 330 core

in vec3 outNormal;
in vec2 TexCoord;
in vec3 fragPos;
uniform sampler2D texture0;

struct Ambient
{
    vec3 color;
    float str;
};

uniform Ambient ambient;

struct Material
{
	vec4 color;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform Material material;

struct DirectionalLight
{
	vec3 direction;
	vec3 color;
	float diffuseIntensity;
};

uniform DirectionalLight directionalLight;

vec4 CalDirectionalLight(vec3 _ambientResult);

void main()
{
    vec4 texColor = texture(texture0, TexCoord);
    vec3 ambientResult = (ambient.color * material.ambient) * ambient.str;
    vec4 result = vec4(ambientResult,1.0);

    if(directionalLight.diffuseIntensity>0.0)
     result += CalDirectionalLight(ambientResult);

    gl_FragColor = result * material.color;

}
vec4 CalDirectionalLight(vec3 _ambientResult) //diffuse
{
    
    float _diff = max(dot(normalize(outNormal), directionalLight.direction), 0.0);
    vec3 aux = material.diffuse;
    vec3 _diffuse = (directionalLight.color * _diff * material.diffuse) * directionalLight.diffuseIntensity;
    return vec4(_diffuse,1.0);
}