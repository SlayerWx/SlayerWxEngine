#version 330 core

in vec3 outNormal;
in vec2 TexCoord;
in vec3 fragPos;
uniform sampler2D texture0;
uniform vec3 viewPos;

struct Material
{
	vec4 color;
	vec3 ambient;
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};

uniform Material material;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light;  


vec3 CalAmbient();
vec3 CalDiffuse(vec3 _ambientResult,vec3 norm, vec3 lightDir);
vec3 CalSpecular(vec3 norm, vec3 lightDir);


void main()
{
    vec3 norm = normalize(outNormal);
    vec3 lightDir = normalize(light.position - fragPos);

    vec3 ambient = CalAmbient() * material.ambient;
    
    vec3 diff = CalDiffuse(ambient,norm,lightDir);
    vec3 spec =  CalSpecular(norm,lightDir);

    gl_FragColor = vec4(ambient + diff + spec,1.0) * texture(texture0,TexCoord) * material.color;

} 

vec3 CalAmbient()
{
    return light.ambient * material.ambient * texture(material.diffuse,TexCoord).rgb;
}

vec3 CalDiffuse(vec3 _ambientResult,vec3 norm, vec3 lightDir)  //diffuse
{
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = light.diffuse * (diff * texture(material.diffuse,TexCoord).rgb);
    return diffuse;
}
vec3 CalSpecular(vec3 norm, vec3 lightDir) // specular
{

    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * (spec * texture(material.specular,TexCoord).rgb);  
   return specular;
}