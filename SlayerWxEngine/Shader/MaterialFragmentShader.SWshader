#version 330 core

in vec3 outNormal;
in vec2 TexCoord;
in vec3 fragPos;
uniform sampler2D texture0;
uniform vec3 viewPos;
struct Ambient
{
    vec3 color;
    float str;
};

uniform Ambient ambient;

struct Material
{
	vec4 color;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform Material material;

struct DirectionalLight
{
    vec3 position;
	vec3 direction;
	vec3 color;
	float diffuseIntensity;
};

uniform DirectionalLight directionalLight;

struct SpotLight
{
	vec3 position;
    vec3 direction;
    vec3 color;
	float specularIntensity;
    float shininess;
};

uniform SpotLight spotLight;

vec4 CalDiffuse(vec3 _ambientResult);
vec4 CalSpecular();


void main()
{
    // ambient
    vec3 ambient = ambient.str * ambient.color;
  	
    // diffuse 
    vec3 norm = normalize(outNormal);
    vec3 lightDir = normalize(directionalLight.position - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * directionalLight.color;
    
    // specular
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), spotLight.shininess);
    vec3 specular = spotLight.specularIntensity * spec * spotLight.color;  
        
    gl_FragColor = vec4(ambient + diffuse + specular,1.0) * material.color;
} 




//void main()
//{
//    vec4 texColor = texture(texture0, TexCoord);
//    vec3 ambientResult = (ambient.color * material.ambient) * ambient.str;
//    vec4 result = vec4(ambientResult,1.0);
//
//    if(directionalLight.diffuseIntensity>0.0)
//     result += CalDiffuse(ambientResult);
//
//     if(spotLight.specularIntensity > 0.0)
//     result += CalSpecular();
//
//    gl_FragColor = result * material.color;
//
//}
vec4 CalDiffuse(vec3 _ambientResult) 
{
    
    float _diff = max(dot(normalize(outNormal), directionalLight.direction), 0.0);
    vec3 aux = material.diffuse;
    vec3 _diffuse = (directionalLight.color * _diff * material.diffuse) * directionalLight.diffuseIntensity;
    return vec4(_diffuse,1.0);
}
vec4 CalSpecular() // specular
{

   vec3 viewDir = normalize(viewPos - fragPos);
   vec3 reflectDir = reflect(normalize(-spotLight.position - fragPos), normalize(outNormal));  
   float spec = pow(max(dot(viewDir, reflectDir), 0.0), 256);
   return vec4((spotLight.color * spec * material.specular) * spotLight.specularIntensity,1.0);
}